// Copyright Titanium I.T. LLC.
import * as ensure from "util/ensure.js";
import assert from "util/assert.js";
import http from "node:http";
import { HttpClient } from "http/http_client.js";
import { ignorePromiseErrorAsync } from "util/test_helper.js";

const HOST = "localhost";
const PORT = 5001;

describe.only("HTTP Client", () => {

	describe("happy path", () => {

		// Challenges #1-11
		it("performs request", async () => {
			const server = http.createServer();

			await new Promise((resolve, reject) => {
				server.listen(PORT);
				server.on("listening", () => {
					console.log("SERVER LISTENING");
					return resolve();
				});
			});
			console.log("SERVER STARTED");


			server.on("request", (serverRequest, serverResponse) => {
				console.log("SERVER RECEIVING REQUEST");
				serverRequest.resume();
				serverRequest.on("end", () => {
					console.log("SERVER RECEIVED ENTIRE REQUEST");
				});
			});


			console.log("CLIENT SENDING REQUEST");
			const clientRequest = http.request({
				host: HOST,
				port: PORT,
			});
			clientRequest.end();


			// await new Promise((resolve, reject) => {
			// 	server.close();
			// 	server.on("close", () => {
			// 		console.log("SERVER CLOSED");
			// 		return resolve();
			// 	});
			// });
			// console.log("SERVER STOPPED");
		});

		// Challenge #12
		it("returns response", async () => {
			// to do
		});

		// Challenge #12
		it("headers and body are optional", async () => {
			// to do
		});

	});


	describe("failure paths", () => {

		// Bonus Challenge #2
		it("fails gracefully if connection is refused", async () => {
			// to do
		});

		// Bonus Challenge #1
		it("fails fast if body is provided with GET request", async () => {
			// to do
		});

	});


	describe("cancellation", () => {

		// Bonus Challenge #4
		it("can cancel requests", async () => {
			// to do
		});

		// Bonus Challenge #5
		it("ignores additional requests to cancel", async () => {
			// to do
		});

		// Bonus Challenge #5
		it("ignores cancellation that occurs after response has been received", async () => {
			// to do
		});

	});

});
